##Using CyVerse Discovery Environment Apps: RTMA_v2.6.3, then Rstudio-DESeq2 (Using RTMA feature_counts.txt output)
##(https://rnaseq-webinar-2019.readthedocs.io/en/latest/)


## RNA-seq analysis with DESeq2
## Adapted from Stephen Turner, @genetics_blog

# RNA-seq data from PRJNA315516
# https://www.ncbi.nlm.nih.gov//bioproject/PRJNA315516.
# 3 samples are a single mutant ("fc2"), 3 samples are a double mutant ("fas2;fc2")

#Install Deseq2

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("DESeq2")

#Install TidyVerse

install.packages("tidyverse")

library(tidyverse)

# 1.0 Import & pre-process ----------------------------------------------------

# 1.1 Import data from featureCounts
countdata <- read.table("feature_counts.txt", header=TRUE, row.names=1)


# 1.2 Remove .bam or .sam from filenames
colnames(countdata) <- gsub("\\.[sb]am$", "", colnames(countdata))

# 1.3 Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)

# 1.4 Assign condition (Ex:first three are fc2, second three are fas2;fc2)
(condition <- factor(c(rep("fc2", 3), rep("fas2;fc2", 3))))

# 2.0 Analysis with DESeq2 
library(DESeq2)

# 2.1 Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds

# 2.2 Run the DESeq pipeline
dds <- DESeq(dds)

# 3.0 Quality Control section

# 3.1 Plot dispersions
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()

# 3.2 Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))

# 3.3 Colors for plots below
library(RColorBrewer)

(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])

# 3.4 Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))

# 3.5 Install required "gplots" R package
install.packages("gplots")
library(gplots)

png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
          col=colorpanel(100, "black", "white"),
          ColSideColors=mycols[condition], RowSideColors=mycols[condition],
          margin=c(10, 10), main="Sample Distance Matrix")
dev.off()

# 3.6 Principal components analysis

png("qc-pca.png", 1000, 1000, pointsize=20)
DESeq2::plotPCA(rld, intgroup="condition")
dev.off()


# 4.0 Get differential expression results
res <- results(dds)
table(res$padj<0.05)

## 4.1 Order by adjusted p-value
res <- res[order(res$padj), ]

## 4.2 Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)

## 4.3 Write results
write.csv(resdata, file="diffexpr-results.csv")

# 5.0 Visualization

## 5.1 MA plot
## Stephen Turner's modified MA plot:

maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
  with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
  with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
  if (labelsig) {
    require(calibrate)
    with(subset(res, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
  }
}

png("diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()

## 5.2 Volcano plot with "significant" genes labeled
volcanoplot <- function (res, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
  with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
  with(subset(res, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
  with(subset(res, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
  with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
  if (labelsig) {
    require(calibrate)
    with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
  }
  legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(11, 11))
dev.off()

# 6.0 Save your R session info for reproducibility 

sessionInfo()

# 7.0 Enhanced Volcano Plot 

##Enhanced Volcano Plot (Significant differentially expressed genes labeled) (devtools::install_github('kevinblighe/EnhancedVolcano')
## (Kevin Blighe, Sharmila Rana, Myles Lewis)
## Blighe, K, S Rana, and M Lewis. 2018. “EnhancedVolcano: Publication-ready volcano plots with enhanced colouring and labeling.” https://github.com/kevinblighe.

if (!requireNamespace('BiocManager', quietly = TRUE))
install.packages('BiocManager')
BiocManager::install('EnhancedVolcano')

devtools::install_github('kevinblighe/EnhancedVolcano')

library(EnhancedVolcano)

##Change xlim as needed (View diffexpr-results.csv to identify max/min diefferentially expressed genes)

EnhancedVolcano(res,
                lab = rownames(res),
                x = 'log2FoldChange',
                y = 'pvalue',
                xlim = c(-11, 11))

#8 Plot heatmap of differentially expressed genes
# padj < 0.1 and Fold Change > 2
mostSig <- res[res$padj < 0.1 & abs(res$log2FoldChange) >= 1,]
mostSig <- rownames(mostSig)
norm_counts <- counts(dds, normalize=T)
sig_counts <- norm_counts[mostSig,]

tiff("heatmap_diff_expressed.tiff", width=500, height = 1200)
heatmap.2(sig_counts, trace='none', col=greenred(56), 
          scale="row", mar=c(10, 10), key=T, keysize=1, cexRow = 0.3,
          cexCol = 2, main = "padj < 0.05 & Fold Change >= 1")
dev.off()

tiff("heatmap_diff_expressed_different_style.tiff", width=500, height = 1200)
pheatmap(sig_counts, scale = "row", fontsize_row=1, fontsize_col = 10,
         annotation_col=annotation_col, cluster_cols=F)
dev.off()


# 8.0 Save your R session info for reproducibility 

sessionInfo()

